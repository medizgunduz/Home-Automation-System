`timescale 1ns / 1ps

module smart_home_system (
    input wire [7:0] temperature,
    input wire [7:0] humidity,
    input wire livingroommotion_sensor,
    input wire bedroommotion_sensor,
    input wire kitchenmotion_sensor,
    input wire bathroommotion_sensor,
    input wire time_window,
    input wire indoor_light,
    input wire outdoor_light,
    input wire curtains,
    input wire reset,
    input wire clk,
    
    output wire z,
    output wire livingroom_lights,
    output wire bedroom_lights,
    output wire kitchen_lights,
    output wire bathroom_lights,
    output wire light_status,
    output wire curtain_1,
    output wire curtain_2
);

    // Climate Control Alt Modülü
    climate_control climate_ctrl (
        .temperature(temperature),
        .humidity(humidity),
        .clk(clk),
        .reset(reset),
        .z(z)
    );

    // Lights Control Alt Modülleri
    lights_control livingroom_ctrl (
        .motion_sensor(livingroommotion_sensor),
        .time_window(time_window),
        .clk(clk),
        .reset(reset),
        .light_output(livingroom_lights)
    );

    lights_control bedroom_ctrl (
        .motion_sensor(bedroommotion_sensor),
        .time_window(time_window),
        .clk(clk),
        .reset(reset),
        .light_output(bedroom_lights)
    );

    lights_control kitchen_ctrl (
        .motion_sensor(kitchenmotion_sensor),
        .time_window(time_window),
        .clk(clk),
        .reset(reset),
        .light_output(kitchen_lights)
    );

    lights_control bathroom_ctrl (
        .motion_sensor(bathroommotion_sensor),
        .time_window(time_window),
        .clk(clk),
        .reset(reset),
        .light_output(bathroom_lights)
    );

    // Curtains Control Alt Modülü
    curtains_control curtain_ctrl (
        .outdoor_light(outdoor_light),
        .curtains(curtains),
        .clk(clk),
        .reset(reset),
        .curtain_1(curtain_1),
        .curtain_2(curtain_2),
        .light_status(light_status)
    );

endmodule









module climate_control (
    input wire [7:0] temperature,
    input wire [7:0] humidity,
    input wire clk,
    input wire reset,
    output reg z
);

    reg [1:0] current_state, next_state;
    wire condition_met;

    assign condition_met = 
        ((temperature < 18) | (temperature > 22)) & 
        ((humidity < 40) | (humidity > 60));

    always @(posedge clk or posedge reset) begin
        if (reset)
            current_state <= 2'b00;
        else
            current_state <= next_state;
    end

    always @(*) begin
        case (current_state)
            2'b00: next_state = (condition_met) ? 2'b01 : 2'b00;
            2'b01: next_state = (!condition_met) ? 2'b00 : 2'b01;
            default: next_state = 2'b00;
        endcase
    end

    always @(*) begin
        case (current_state)
            2'b00: z = 0;
            2'b01: z = condition_met;
            default: z = 0;
        endcase
    end

endmodule







module lights_control (
    input wire motion_sensor,
    input wire time_window,
    input wire clk,
    input wire reset,
    output reg light_output
);

    reg state;

    always @(posedge clk or posedge reset) begin
        if (reset)
            state <= 0;
        else if (motion_sensor && time_window)
            state <= 1;
        else
            state <= 0;
    end

    always @(*) begin
        light_output = state;
    end

endmodule






module curtains_control (
    input wire outdoor_light,
    input wire curtains,
    input wire clk,
    input wire reset,
    output reg curtain_1,
    output reg curtain_2,
    output reg light_status
);

    reg [1:0] curtain_state, next_curtain_state;

    always @(posedge clk or posedge reset) begin
        if (reset)
            curtain_state <= 2'b00;
        else
            curtain_state <= next_curtain_state;
    end

    always @(*) begin
        next_curtain_state = curtain_state;
        curtain_1 = 0;
        curtain_2 = 0;
        light_status = 0;

        case (curtain_state)
            2'b00: if (outdoor_light && !curtains) begin
                next_curtain_state = 2'b01;
                curtain_1 = 1;
                curtain_2 = 1;
            end
            2'b01: if (!outdoor_light && curtains) begin
                next_curtain_state = 2'b10;
                curtain_1 = 0;
                curtain_2 = 0;
                light_status = 1;
            end else begin
                light_status = 0;
            end
            2'b10: if (!outdoor_light && !curtains) begin
                next_curtain_state = 2'b11;
                light_status = 1;
            end
            2'b11: if (outdoor_light && !curtains) begin
                next_curtain_state = 2'b00;
                curtain_1 = 1;
                curtain_2 = 1;
            end
            default: next_curtain_state = 2'b00;
        endcase
    end

endmodule










